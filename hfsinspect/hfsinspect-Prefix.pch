//
// Prefix header for all source files of the 'hfsinspect' target in the 'hfsinspect' project
//

// ANSI C
#include <stdlib.h>

// FILE/printf
#include <stdio.h>

// POSIX
#include <unistd.h>

// basename
#include <libgen.h>

// vaargs
#include <stdarg.h>

// Wide chars
#include <wchar.h>

// strcpy, memset, etc.
#include <strings.h>

// errno/perror
#include <errno.h>

// Bool
#include <stdbool.h>

// malloc functions
#include <malloc/malloc.h>

// Logging
#include "logging.h"

#include "partition_support.h"

#ifndef	MIN
#define	MIN(a, b)	((a) < (b) ? (a) : (b))
#endif

#ifndef	MAX
#define	MAX(a, b)	((a) > (b) ? (a) : (b))
#endif

#ifndef ZERO_STRUCT
#define ZERO_STRUCT(name) memset(&(name), 0, sizeof((name)))
#endif

#ifndef INIT_BUFFER
#define INIT_BUFFER(name, size) { \
    (name) = valloc( (size) ); \
    if ((name) == NULL) { \
        exit(errno); \
    }; \
    memset((name), 0, malloc_size((name))); \
}
#endif

#ifndef INIT_STRING
#define INIT_STRING(name, size) { \
    (name) = malloc( (size) ); \
    if ( (name) == NULL) { \
        perror("malloc"); \
        exit(errno); \
    }; \
    memset( (name), '\0', malloc_size( (name) )); \
}
#endif

#ifndef FREE_BUFFER
#define FREE_BUFFER(name)  { \
    if (malloc_size( (name) )) { \
        memset( (name), 0, malloc_size( (name) )); \
        free( (name) ); \
        (name) = NULL; \
    } \
}
#endif

#define FOR_UNTIL(var, end) for(int var = 0; var < end; var++)
